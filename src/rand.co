class RC4Rand
	(seed) ->
		@s = (for x from 0 til 256 => x)
		@i = @j = 0
		if seed then @mix(seed)

	mix: !(seed) ->
		seed = "#seed"
		j = 0
		for i from 0 til @s.length
			ch = seed.charCodeAt(i % seed.length) & 0xFF
			j += @s[i] + ch
			j %= 256
			@_swap(i, j)

	_swap: !(i, j) -> [@s[j], @s[i]] = [@s[i], @s[j]]

	nextByte: !->
		@i = (@i + 1) % 256
		@j = (@j + @s[@i]) % 256
		@_swap(@i, @j)
		return @s[(@s[@i] + @s[@j]) % 256]

	nextFloat: !->
		const BYTES = 7
		output = 0
		for i from 0 til BYTES
			output = output * 256 + @nextByte()
		return output / (Math.pow(2, BYTES * 8) - 1)

	uniform: (a, b) ->
		if b < a then [a, b] = [b, a]
		return a + @nextFloat() * (b - a)

	uniformInt: (a, b) -> Math.floor(@uniform(a, b))

class RandomFarm
	(@seed) ->
	get: (name) -> new RC4Rand("#{@seed}+#{name}")


rand = (a, b) -> a + Math.random() * (b - a)


export RC4Rand
export RandomFarm
export rand
